import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv
from database import init_db, add_search_history, get_search_history, update_movie_stats, get_user_stats
from movie_search import MovieSearcher
import logging
from datetime import datetime


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'bot_{datetime.now().strftime("%Y%m%d")}.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()

bot = Bot(token=os.environ['TELEGRAM_TOKEN_NEW'])
dp = Dispatcher()

movie_searcher = MovieSearcher()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    logger.info(f"User {message.from_user.id} started the bot")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤. üé¨\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º!\n"
        "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/history - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    logger.info(f"User {message.from_user.id} requested help")
    await message.answer(
        "–Ø —É–º–µ—é –∏—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º—ã! üé•\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.\n"
        "–Ø –ø–æ–∫–∞–∂—É:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Ä¢ –†–µ–π—Ç–∏–Ω–≥\n"
        "‚Ä¢ –ü–æ—Å—Ç–µ—Ä\n"
        "‚Ä¢ –ñ–∞–Ω—Ä—ã –∏ —Å—Ç—Ä–∞–Ω—ã\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/history - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
    )


@dp.message(Command("history"))
async def cmd_history(message: Message):
    logger.info(f"User {message.from_user.id} requested search history")
    history = await get_search_history(message.from_user.id)
    if not history:
        logger.info(f"No search history found for user {message.from_user.id}")
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.")
        return

    response = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:\n\n"
    for item in history:
        response += f"‚Ä¢ {item.movie_title}\n"
        response += f"  –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {item.query}\n"
        response += f"  –î–∞—Ç–∞: {item.timestamp.strftime('%d.%m.%Y %H:%M')}\n\n"

    await message.answer(response)
    logger.info(f"Sent search history to user {message.from_user.id}")


@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    logger.info(f"User {message.from_user.id} requested viewing stats")
    stats = await get_user_stats(message.from_user.id)
    if not stats:
        logger.info(f"No viewing stats found for user {message.from_user.id}")
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.")
        return

    response = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:\n\n"
    for stat in stats:
        response += f"‚Ä¢ {stat.movie_title}\n"
        response += f"  –ü–æ–∫–∞–∑–∞–Ω–æ —Ä–∞–∑: {stat.times_shown}\n\n"

    await message.answer(response)
    logger.info(f"Sent viewing stats to user {message.from_user.id}")


@dp.message()
async def handle_movie_search(message: Message):
    if message.text.startswith('/'):
        return

    logger.info(f"User {message.from_user.id} searching for: {message.text}")
    searching_msg = await message.answer("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ...")

    try:
        movies = await movie_searcher.search_movie(message.text)
        logger.info(f"Found {len(movies)} movies for query: {message.text}")

        if not movies:
            logger.info(f"No movies found for query: {message.text}")
            await searching_msg.edit_text("üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
            return

        for movie in movies:
            logger.info(f"Processing movie: {movie.title}")
            await update_movie_stats(message.from_user.id, movie.movie_id, movie.title)

            await add_search_history(
                message.from_user.id,
                message.text,
                movie.title,
                movie.movie_id
            )

            response = f"üé¨ {movie.title}\n\n"
            response += f"üìù {movie.overview}\n\n"
            response += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie.rating}/10\n"
            response += f"üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {movie.release_date}\n"
            response += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {movie.film_length}\n\n"

            if movie.genres:
                response += f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join(movie.genres)}\n"
            if movie.countries:
                response += f"üåç –°—Ç—Ä–∞–Ω—ã: {', '.join(movie.countries)}\n\n"

            response += "üîó –°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n"
            for link in movie.viewing_links:
                response += f"‚Ä¢ {link}\n"

            if movie.poster_url:
                await message.answer_photo(movie.poster_url, caption=response)
                logger.info(f"Sent movie info with poster for: {movie.title}")
            else:
                await message.answer(response)
                logger.info(
                    f"Sent movie info without poster for: {movie.title}")

        await searching_msg.delete()
        logger.info(
            f"Successfully completed search for user {message.from_user.id}")

    except Exception as e:
        logger.error(
            f"Error processing search request: {str(e)}", exc_info=True)
        await searching_msg.edit_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def main():
    await init_db()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
