import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from dotenv import load_dotenv
from database import init_db, add_search_history, get_search_history, update_movie_stats, get_user_stats
from movie_search import MovieSearcher
import logging
from datetime import datetime
import json
import random


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'bot_{datetime.now().strftime("%Y%m%d")}.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv(dotenv_path=".env", override=True)


bot = Bot(token=os.environ['TELEGRAM_TOKEN_NEW'])
dp = Dispatcher()

movie_searcher = MovieSearcher()

# Dictionary to store movie data temporarily
movie_cache = {}

# Dictionary to store game data
game_cache = {}


@dp.message(Command("start"))
async def cmd_start(message: Message):
    logger.info(f"User {message.from_user.id} started the bot")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤. üé¨\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º!\n"
        "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/history - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
        "/game - —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —Ñ–∏–ª—å–º'"
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    logger.info(f"User {message.from_user.id} requested help")
    await message.answer(
        "–Ø —É–º–µ—é –∏—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º—ã! üé•\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.\n"
        "–Ø –ø–æ–∫–∞–∂—É:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Ä¢ –†–µ–π—Ç–∏–Ω–≥\n"
        "‚Ä¢ –ü–æ—Å—Ç–µ—Ä\n"
        "‚Ä¢ –ñ–∞–Ω—Ä—ã –∏ —Å—Ç—Ä–∞–Ω—ã\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/history - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
        "/game - —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —Ñ–∏–ª—å–º'"
    )


@dp.message(Command("history"))
async def cmd_history(message: Message):
    logger.info(f"User {message.from_user.id} requested search history")
    history = await get_search_history(message.from_user.id)
    if not history:
        logger.info(f"No search history found for user {message.from_user.id}")
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.")
        return

    response = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:\n\n"
    for item in history:
        response += f"‚Ä¢ {item.movie_title}\n"
        response += f"  –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {item.query}\n"
        response += f"  –î–∞—Ç–∞: {item.timestamp.strftime('%d.%m.%Y %H:%M')}\n\n"

    await message.answer(response)
    logger.info(f"Sent search history to user {message.from_user.id}")


@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    logger.info(f"User {message.from_user.id} requested viewing stats")
    stats = await get_user_stats(message.from_user.id)
    if not stats:
        logger.info(f"No viewing stats found for user {message.from_user.id}")
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.")
        return

    response = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:\n\n"
    for stat in stats:
        response += f"‚Ä¢ {stat.movie_title}\n"
        response += f"  –ü–æ–∫–∞–∑–∞–Ω–æ —Ä–∞–∑: {stat.times_shown}\n\n"

    await message.answer(response)
    logger.info(f"Sent viewing stats to user {message.from_user.id}")


@dp.message(Command("game"))
async def cmd_game(message: Message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} started the game")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º/—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        game_cache[user_id] = {
            'score': 0,
            'total_questions': 0
        }

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        text, keyboard = await prepare_new_question(user_id)

        if not keyboard:
            await message.answer(text)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.chat.type == 'private':
            await message.answer(text, reply_markup=keyboard)
        else:
            # –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")
            sent_msg = await message.answer(text, reply_markup=keyboard)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            game_cache[user_id]['last_message_id'] = sent_msg.message_id

    except Exception as e:
        logger.error(f"Error in cmd_game: {str(e)}", exc_info=True)
        await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("random"))
async def cmd_random(message: Message):
    logger.info(f"User {message.from_user.id} requested random movie")
    searching_msg = await message.answer("üîç –ò—â—É —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ —Ç–æ–ø-250...")

    try:
        movies = await movie_searcher.random_movie()
        if not movies:
            logger.info(f"No random movies found")
            await searching_msg.edit_text("üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        movie = movies[0]
        await update_movie_stats(message.from_user.id, movie.movie_id, movie.title)

        response = f"üé¨ {movie.title}\n\n"
        response += f"üìù {movie.overview}\n\n"
        response += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie.rating}/10\n"
        response += f"üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {movie.release_date}\n"
        response += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {movie.film_length}\n\n"

        if movie.genres:
            response += f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join(movie.genres)}\n"
        if movie.countries:
            response += f"üåç –°—Ç—Ä–∞–Ω—ã: {', '.join(movie.countries)}\n\n"

        response += "üîó –°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n"
        for link in movie.viewing_links:
            response += f"‚Ä¢ {link}\n"

        # Create button for getting another random movie
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="üé≤ –î—Ä—É–≥–æ–π —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º",
                callback_data="random_movie"
            )
        ]])

        if movie.poster_url:
            await searching_msg.delete()
            await message.answer_photo(
                photo=movie.poster_url,
                caption=response,
                reply_markup=keyboard
            )
        else:
            await searching_msg.edit_text(
                text=response,
                reply_markup=keyboard
            )

        logger.info(f"Sent random movie to user {message.from_user.id}")

    except Exception as e:
        logger.error(
            f"Error processing random movie request: {str(e)}", exc_info=True)
        await searching_msg.edit_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query(lambda c: c.data == "random_movie")
async def process_random_callback(callback_query: CallbackQuery):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        await callback_query.message.edit_caption(
            caption="üîç –ò—â—É –¥—Ä—É–≥–æ–π —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º..."
        )

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º
        movies = await movie_searcher.random_movie()
        if not movies:
            await callback_query.message.edit_caption(
                caption="üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        movie = movies[0]
        await update_movie_stats(callback_query.from_user.id, movie.movie_id, movie.title)

        response = f"üé¨ {movie.title}\n\n"
        response += f"üìù {movie.overview}\n\n"
        response += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie.rating}/10\n"
        response += f"üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {movie.release_date}\n"
        response += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {movie.film_length}\n\n"

        if movie.genres:
            response += f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join(movie.genres)}\n"
        if movie.countries:
            response += f"üåç –°—Ç—Ä–∞–Ω—ã: {', '.join(movie.countries)}\n\n"

        response += "üîó –°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n"
        for link in movie.viewing_links:
            response += f"‚Ä¢ {link}\n"

        # Create button for getting another random movie
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="üé≤ –î—Ä—É–≥–æ–π —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º",
                callback_data="random_movie"
            )
        ]])

        # Update the message with new movie info
        if movie.poster_url:
            await callback_query.message.edit_media(
                media=types.InputMediaPhoto(
                    media=movie.poster_url,
                    caption=response
                ),
                reply_markup=keyboard
            )
        else:
            await callback_query.message.edit_text(
                text=response,
                reply_markup=keyboard
            )

        await callback_query.answer()

    except Exception as e:
        logger.error(
            f"Error processing random movie callback: {str(e)}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞")


@dp.callback_query(lambda c: c.data.startswith('movie_'))
async def process_movie_callback(callback_query: CallbackQuery):
    try:
        # Extract movie index from callback data
        movie_index = int(callback_query.data.split('_')[1])
        user_id = callback_query.from_user.id

        # Get movie data from cache
        if user_id not in movie_cache:
            await callback_query.answer("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Å–Ω–æ–≤–∞.")
            return

        movies = movie_cache[user_id]
        if movie_index >= len(movies):
            await callback_query.answer("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        movie = movies[movie_index]
        await update_movie_stats(user_id, movie.movie_id, movie.title)

        response = f"üé¨ {movie.title}\n\n"
        response += f"üìù {movie.overview}\n\n"
        response += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie.rating}/10\n"
        response += f"üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {movie.release_date}\n"
        response += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {movie.film_length}\n\n"

        if movie.genres:
            response += f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join(movie.genres)}\n"
        if movie.countries:
            response += f"üåç –°—Ç—Ä–∞–Ω—ã: {', '.join(movie.countries)}\n\n"

        response += "üîó –°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n"
        for link in movie.viewing_links:
            response += f"‚Ä¢ {link}\n"

        # Create navigation buttons for adjacent movies
        buttons = []
        nav_buttons = []

        # Add previous movie button if exists
        if movie_index > 0:
            prev_movie = movies[movie_index - 1]
            nav_buttons.append(InlineKeyboardButton(
                text=f"‚¨ÖÔ∏è {prev_movie.title[:20]}...",
                callback_data=f"movie_{movie_index - 1}"
            ))

        # Add next movie button if exists
        if movie_index < len(movies) - 1:
            next_movie = movies[movie_index + 1]
            nav_buttons.append(InlineKeyboardButton(
                text=f"{next_movie.title[:20]}... ‚û°Ô∏è",
                callback_data=f"movie_{movie_index + 1}"
            ))

        if nav_buttons:
            buttons.append(nav_buttons)

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        # Update the message with new movie info
        if movie.poster_url:
            await callback_query.message.edit_media(
                media=types.InputMediaPhoto(
                    media=movie.poster_url,
                    caption=response
                ),
                reply_markup=keyboard
            )
        else:
            await callback_query.message.edit_text(
                text=response,
                reply_markup=keyboard
            )

        await callback_query.answer()

    except Exception as e:
        logger.error(f"Error processing callback: {str(e)}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@dp.message()
async def handle_movie_search(message: Message):
    if message.text.startswith('/'):
        return

    logger.info(f"User {message.from_user.id} searching for: {message.text}")
    searching_msg = await message.answer("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ...")

    try:
        movies = await movie_searcher.search_movie(message.text)
        logger.info(f"Found {len(movies)} movies for query: {message.text}")

        if not movies:
            logger.info(f"No movies found for query: {message.text}")
            await searching_msg.edit_text("üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
            return

        # Store movies in cache
        movie_cache[message.from_user.id] = movies

        # Get first movie
        movie = movies[0]
        await update_movie_stats(message.from_user.id, movie.movie_id, movie.title)

        # Create response for first movie
        response = f"üé¨ {movie.title}\n\n"
        response += f"üìù {movie.overview}\n\n"
        response += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie.rating}/10\n"
        response += f"üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {movie.release_date}\n"
        response += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {movie.film_length}\n\n"

        if movie.genres:
            response += f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join(movie.genres)}\n"
        if movie.countries:
            response += f"üåç –°—Ç—Ä–∞–Ω—ã: {', '.join(movie.countries)}\n\n"

        response += "üîó –°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n"
        for link in movie.viewing_links:
            response += f"‚Ä¢ {link}\n"

        # Create navigation buttons for adjacent movies
        buttons = []
        nav_buttons = []

        # Add next movie button if exists
        if len(movies) > 1:
            next_movie = movies[1]
            nav_buttons.append(InlineKeyboardButton(
                text=f"{next_movie.title[:20]}... ‚û°Ô∏è",
                callback_data=f"movie_1"
            ))

        if nav_buttons:
            buttons.append(nav_buttons)

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        # Send first movie with buttons
        if movie.poster_url:
            await searching_msg.delete()
            await message.answer_photo(
                photo=movie.poster_url,
                caption=response,
                reply_markup=keyboard
            )
        else:
            await searching_msg.edit_text(
                text=response,
                reply_markup=keyboard
            )

        logger.info(
            f"Sent first movie with navigation buttons to user {message.from_user.id}")

    except Exception as e:
        logger.error(
            f"Error processing search request: {str(e)}", exc_info=True)
        await searching_msg.edit_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query(lambda c: c.data == "next_question")
async def process_next_question(callback_query: CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        logger.info(f"Processing next question for user {user_id}")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        text, keyboard = await prepare_new_question(user_id)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(text, reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        logger.error(
            f"Error in process_next_question: {str(e)}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É")


async def prepare_new_question(user_id: int):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
        game_data = game_cache.get(user_id, {'score': 0, 'total_questions': 0})
        if game_data['total_questions'] >= 5:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_score = game_data['score']
            total_questions = game_data['total_questions']
            percentage = (final_score / total_questions) * 100

            result_text = (
                "üéÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n\n"
                f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {final_score} –∏–∑ {total_questions}\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {percentage:.1f}%\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if percentage == 100:
                result_text += "üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–∏–Ω–æ–º–∞–Ω!"
            elif percentage >= 80:
                result_text += "üåü –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤ –∫–∏–Ω–æ!"
            elif percentage >= 60:
                result_text += "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!"
            else:
                result_text += "üìö –ù–µ–ø–ª–æ—Ö–æ! –°—Ç–æ–∏—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤!"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üéÆ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É",
                    callback_data="new_game"
                )
            ]])

            # –û—á–∏—â–∞–µ–º –∫—ç—à –∏–≥—Ä—ã
            if user_id in game_cache:
                del game_cache[user_id]

            return result_text, keyboard

        logger.info("Getting random movies for game...")
        movies = await movie_searcher.get_random_movies_for_game(4)
        if not movies:
            logger.error("No movies found for game")
            return "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None

        # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∏–ª—å–º
        correct_movie = random.choice(movies)
        logger.info(f"Selected correct movie: {correct_movie.title}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        game_data.update({
            'correct_movie': correct_movie,
            'options': [m for m in movies if m != correct_movie]
        })
        game_cache[user_id] = game_data

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = (
            "üéÆ –£–≥–∞–¥–∞–π —Ñ–∏–ª—å–º!\n\n"
            f"üìù {movie_searcher.get_movie_description_for_game(correct_movie)}\n\n"
            f"–í–æ–ø—Ä–æ—Å {game_data['total_questions'] + 1} –∏–∑ 5\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        all_movies = [correct_movie] + game_data['options']
        random.shuffle(all_movies)
        buttons = [
            [InlineKeyboardButton(
                text=m.title, callback_data=f"game_{m.movie_id}")]
            for m in all_movies
        ]

        return response, InlineKeyboardMarkup(inline_keyboard=buttons)

    except Exception as e:
        logger.error(f"Error preparing new question: {str(e)}", exc_info=True)
        return "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞", None


@dp.callback_query(lambda c: c.data == "new_game")
async def process_new_game(callback_query: CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        logger.info(f"Starting new game for user {user_id}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫—ç—à –∏–≥—Ä—ã
        game_cache[user_id] = {
            'score': 0,
            'total_questions': 0
        }

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        text, keyboard = await prepare_new_question(user_id)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
        await callback_query.message.edit_text(text, reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        logger.error(f"Error starting new game: {str(e)}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã")


@dp.callback_query(lambda c: c.data.startswith('game_'))
async def process_game_callback(callback_query: CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        logger.info(f"Processing game callback for user {user_id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
        game_data = game_cache.get(user_id)
        if not game_data or 'correct_movie' not in game_data:
            await callback_query.answer("–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /game")
            return

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤
        selected_movie_id = callback_query.data.split('_')[1]
        correct_movie = game_data['correct_movie']
        is_correct = selected_movie_id == correct_movie.movie_id

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        game_data['total_questions'] += 1
        if is_correct:
            game_data['score'] += 1

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_text = ("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct
                       else f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_movie.title}")

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –∫—ç—à–∞
        del game_data['correct_movie']

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await callback_query.message.edit_text(
            f"{result_text}\n\n"
            f"–í–∞—à —Å—á–µ—Ç: {game_data['score']}/{game_data['total_questions']}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üéÆ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å",
                    callback_data="next_question"
                )
            ]])
        )
        await callback_query.answer()

    except Exception as e:
        logger.error(
            f"Error processing game callback: {str(e)}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")


async def main():
    await init_db()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
